package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Phone;

public class PhoneManager implements IPhoneManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTablePhone = "CREATE TABLE Phone(id bigint GENERATED BY DEFAULT AS IDENTITY, mark varchar(20) UNIQUE, price double, model varchar(20), vat int)";

	private PreparedStatement addPhoneStmt;
	private PreparedStatement updatePhoneStmt;
	private PreparedStatement deletePhoneStmt;
	private PreparedStatement searchPhoneStmt;
	private PreparedStatement deleteAllPhonesStmt;
	private PreparedStatement getAllPhonesStmt;

	private Statement statement;

	public PhoneManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Phone".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTablePhone);

			addPhoneStmt = connection.prepareStatement("INSERT INTO Phone (mark, price, model, vat) VALUES (?, ?, ?, ?)");
			deletePhoneStmt = connection.prepareStatement("DELETE FROM Phone WHERE mark=?");
			updatePhoneStmt = connection.prepareStatement("UPDATE Phone SET price=?, model=?, vat=? WHERE mark=?");
			searchPhoneStmt = connection.prepareStatement("SELECT * FROM Phone WHERE mark=?");
			deleteAllPhonesStmt = connection.prepareStatement("DELETE FROM Phone");
			getAllPhonesStmt = connection.prepareStatement("SELECT id, mark, price, model, vat FROM Phone");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void clearPhone() {
		try {
			deleteAllPhonesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addPhone(Phone phone){
		int count = 0;
		try {
			addPhoneStmt.setString(1, phone.getMark());
			addPhoneStmt.setDouble(2, phone.getPrice());
			addPhoneStmt.setString(3, phone.getModel());
			addPhoneStmt.setInt(4, phone.getVat());

			count = addPhoneStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<Phone> getAllPhones() {
		List<Phone> phones = new ArrayList<Phone>();

		try {
			ResultSet rs = getAllPhonesStmt.executeQuery();

			while (rs.next()) {
				Phone p = new Phone();
				p.setId(rs.getInt("id"));
				p.setMark(rs.getString("mark"));
				p.setPrice(rs.getDouble("price"));
				p.setModel(rs.getString("model"));
				p.setVat(rs.getInt("vat"));
				phones.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return phones;
	}

	@Override
	public void addAllPhones(List<Phone> phones) {

		try {
			connection.setAutoCommit(false);
			for (Phone phone : phones) {
				addPhoneStmt.setString(1, phone.getMark());
				addPhoneStmt.setDouble(1, phone.getPrice());
				addPhoneStmt.setString(1, phone.getModel());
				addPhoneStmt.setInt(2, phone.getVat());
				addPhoneStmt.executeUpdate();
			}
			connection.commit();
			
		} catch (SQLException exception) {
			
			try {
				connection.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
				//!!!! ALARM
			}
		}

	}



	@Override
	public int updatePhone(Phone phone) {
		int count=0;
		try {
			updatePhoneStmt.setDouble(1, phone.getPrice());
			updatePhoneStmt.setString(2, phone.getModel());
			updatePhoneStmt.setInt(3, phone.getVat());
			updatePhoneStmt.setString(4, phone.getMark());
			count=updatePhoneStmt.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public int deletePhone(Phone phone) {
		int count=0;
		try {
			deletePhoneStmt.setString(1, phone.getMark());
			count=deletePhoneStmt.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public Phone searchPhone(String mark) {
		Phone p = new Phone();
		try {
			searchPhoneStmt.setString(1,mark);
			ResultSet rs = searchPhoneStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setMark(rs.getString("mark"));
				p.setPrice(rs.getDouble("price"));
				p.setModel(rs.getString("model"));
				p.setVat(rs.getInt("vat"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return p;

	}

	@Override
	public void deleteAll(List<Phone> phones) { //transakcja, wywalanie bledu jezeli cos jest zle
	        try{
	            connection.setAutoCommit(false);
	            for (Phone Phone: phones){
	                deletePhoneStmt.setString(1, Phone.getMark());
	                deletePhoneStmt.executeUpdate();
	            }
	            connection.commit();
	 
	        } catch (SQLException exception){
	            try{
	                connection.rollback();
	            } catch (SQLException exc) {
	                exc.printStackTrace();
	            }
	        }
	    }
}